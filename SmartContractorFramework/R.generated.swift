//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
public struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  public static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  public struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  public struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  public struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  public struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  public struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  public struct reuseIdentifier {
    /// Reuse identifier `ContractCell`.
    public static let contractCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "ContractCell")
    /// Reuse identifier `ContractInfoCell`.
    public static let contractInfoCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "ContractInfoCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  public struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  public struct storyboard {
    /// Storyboard `Contracts`.
    public static let contracts = _R.storyboard.contracts()
    /// Storyboard `Support`.
    public static let support = _R.storyboard.support()
    
    /// `UIStoryboard(name: "Contracts", bundle: ...)`
    public static func contracts(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.contracts)
    }
    
    /// `UIStoryboard(name: "Support", bundle: ...)`
    public static func support(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.support)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  public struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

public struct _R: Rswift.Validatable {
  public static func validate() throws {
    try storyboard.validate()
  }
  
  public struct nib {
    fileprivate init() {}
  }
  
  public struct storyboard: Rswift.Validatable {
    public static func validate() throws {
      try contracts.validate()
      try support.validate()
    }
    
    public struct contracts: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      public typealias InitialController = UIKit.UINavigationController
      
      public let bundle = R.hostingBundle
      public let contractViewController = StoryboardViewControllerResource<ContractViewController>(identifier: "ContractViewController")
      public let contractsViewController = StoryboardViewControllerResource<ContractsViewController>(identifier: "ContractsViewController")
      public let name = "Contracts"
      
      public func contractViewController(_: Void = ()) -> ContractViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contractViewController)
      }
      
      public func contractsViewController(_: Void = ()) -> ContractsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contractsViewController)
      }
      
      public static func validate() throws {
        if _R.storyboard.contracts().contractViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contractViewController' could not be loaded from storyboard 'Contracts' as 'ContractViewController'.") }
        if _R.storyboard.contracts().contractsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contractsViewController' could not be loaded from storyboard 'Contracts' as 'ContractsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    public struct support: Rswift.StoryboardResourceType, Rswift.Validatable {
      public let bundle = R.hostingBundle
      public let name = "Support"
      public let support = StoryboardViewControllerResource<SupportViewController>(identifier: "Support")
      
      public func support(_: Void = ()) -> SupportViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: support)
      }
      
      public static func validate() throws {
        if _R.storyboard.support().support() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'support' could not be loaded from storyboard 'Support' as 'SupportViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
